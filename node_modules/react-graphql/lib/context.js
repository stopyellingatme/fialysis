'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createGraphQLContext = createGraphQLContext;

var _graphqlCache = require('graphql-cache');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _events = require('events');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var DEFAULT_OPTS = {
  middleware: [_graphqlCache.normalizeEntitiesMiddleware],
  sessionId: _uuid2.default.v4()
};

function createGraphQLContext() {
  var runQuery = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(query, variables) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', opts.executeQuery(query, variables).then(function (result) {
                updateCache(_graphqlCache.cacheQueryResult.apply(undefined, [context.cache, query, result.data, variables].concat(_toConsumableArray(middleware))));
              }).catch(function (ex) {
                console.log('Got error!', ex);
                throw ex;
              }));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function runQuery(_x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  var userOpts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  if (!userOpts.defaultRenderLoading) {
    throw new Error('createGraphQLContext(): defaultRenderLoading not provided');
  }

  if (!userOpts.defaultRenderError) {
    throw new Error('createGraphQLContext(): defaultRenderError not provided');
  }

  var opts = _extends({}, userOpts, DEFAULT_OPTS);

  var sessionMiddleware = (0, _graphqlCache.sessionValidationMiddleware)({
    sessionId: opts.sessionId
  });

  console.log('Got session id', opts.sessionId);

  var middleware = [sessionMiddleware].concat(_toConsumableArray(opts.middleware));
  var initialCache = opts.initialCache || {};
  var events = new _events.EventEmitter();

  function updateCache(newCache) {
    context.cache = newCache;
    context.events.emit('cacheUpdated', newCache);
  }

  var context = {
    opts: opts,
    cache: initialCache,
    runQuery: runQuery,
    events: events,

    getQueryToExecute: function getQueryToExecute(query, variables) {
      return _graphqlCache.passThroughQuery.apply(undefined, [context.cache, query, variables].concat(_toConsumableArray(middleware)));
    },
    cacheFulfillsQuery: function cacheFulfillsQuery(query, variables) {
      // include outdated cache
      return _graphqlCache.passThroughQuery.apply(undefined, [context.cache, query, variables].concat(_toConsumableArray(opts.middleware))) === null;
    },
    queryCache: function queryCache(query, variables) {
      return _graphqlCache.queryCache.apply(undefined, [context.cache, query, variables].concat(_toConsumableArray(middleware)));
    },
    setCache: function setCache(cache) {
      context.cache = cache;
    }
  };

  return context;
}