'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeEntities = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _visitor = require('graphql/language/visitor');

var _util = require('../../util');

function isEntity(maybeEntity) {
  return maybeEntity && maybeEntity.id;
}

function pushNodeToTopOfStack(cacheStack, node) {
  var rootCache = cacheStack[0];
  var nodeCacheKey = (0, _util.cacheKey)('node', { id: node.id });

  if (!rootCache[nodeCacheKey]) {
    rootCache[nodeCacheKey] = {};
  }

  var nodeInCache = rootCache[nodeCacheKey];

  (0, _util.pushToStack)(cacheStack, nodeInCache);
}

var normalizeEntities = exports.normalizeEntities = {
  cacheQueryResult: {
    enterSelectionSet: function enterSelectionSet(node, cacheStack, resultStack) {
      var result = (0, _util.getTopOfStack)(resultStack);

      if (isEntity(result)) {
        // got entity

        // set id on original tree in cache so it points to node
        (0, _util.getTopOfStack)(cacheStack).id = result.id;

        pushNodeToTopOfStack(cacheStack, result);
      }
    },
    leaveSelectionSet: function leaveSelectionSet(node, cacheStack, resultStack) {
      var result = (0, _util.getTopOfStack)(resultStack);

      if (isEntity(result)) {
        (0, _util.popTopFromStack)(cacheStack);
      }
    }
  },

  passThroughQuery: {
    enterSelectionSet: function enterSelectionSet(node, cacheStack) {
      var result = (0, _util.getTopOfStack)(cacheStack);

      if (isEntity(result)) {
        // got entity
        pushNodeToTopOfStack(cacheStack, result);
      }
    },
    leaveSelectionSet: function leaveSelectionSet(node, cacheStack) {
      var result = (0, _util.getTopOfStack)(cacheStack);

      if (isEntity(result)) {
        (0, _util.popTopFromStack)(cacheStack);

        return _extends({}, node, {
          __shouldHaveId: true
        });
      }
    },
    after: function after(cache, ast) {
      return (0, _visitor.visit)(ast, {
        enter: function enter(node) {
          if (node.__shouldHaveId) {
            return (0, _util.ensureSelectionSetHasField)(node, 'id');
          }
        }
      });
    }
  },

  queryCache: {
    enterSelectionSet: function enterSelectionSet(node, cacheStack) {
      var result = (0, _util.getTopOfStack)(cacheStack);

      if (isEntity(result)) {
        // got entity
        pushNodeToTopOfStack(cacheStack, result);
      }
    },
    leaveSelectionSet: function leaveSelectionSet(node, cacheStack) {
      var result = (0, _util.getTopOfStack)(cacheStack);

      if (isEntity(result)) {
        (0, _util.popTopFromStack)(cacheStack);
      }
    }
  }
};