'use strict';

var _templateObject = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n      ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: 3) {\n              user {\n                id\n                name\n              }\n            }\n\n            otherUsers {\n              id\n              name\n            }\n\n            nestedUser {\n              id\n              about\n            }\n          }\n\n          someOtherUser {\n            id\n            interests\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: 3) {\n              user {\n                id\n                name\n              }\n            }\n\n            otherUsers {\n              id\n              name\n            }\n\n            nestedUser {\n              id\n              about\n            }\n          }\n\n          someOtherUser {\n            id\n            interests\n          }\n        }\n      ']),
    _templateObject3 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n            interests\n            about\n            location {\n              address { street { name } }\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n            interests\n            about\n            location {\n              address { street { name } }\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n      ']),
    _templateObject4 = _taggedTemplateLiteral(['\n        query {\n          user {\n            dateOfBirth\n            about\n            location {\n              address { street { name } }\n            }\n            id\n          }\n          otherUser {\n            id\n            name\n          }\n        }\n      '], ['\n        query {\n          user {\n            dateOfBirth\n            about\n            location {\n              address { street { name } }\n            }\n            id\n          }\n          otherUser {\n            id\n            name\n          }\n        }\n      ']),
    _templateObject5 = _taggedTemplateLiteral(['\n        query {\n          user(id: $userId) {\n            id\n            name\n            dateOfBirth\n            friend {\n              id\n              name\n            }\n          }\n        }\n      '], ['\n        query {\n          user(id: $userId) {\n            id\n            name\n            dateOfBirth\n            friend {\n              id\n              name\n            }\n          }\n        }\n      ']),
    _templateObject6 = _taggedTemplateLiteral(['\n        query {\n          user(id: $userId) {\n            id\n            name\n            dateOfBirth\n            interests\n            about\n            friend {\n              ...Friend\n              id\n              name\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n\n        fragment Friend on User {\n          dateOfBirth\n          interests\n        }\n      '], ['\n        query {\n          user(id: $userId) {\n            id\n            name\n            dateOfBirth\n            interests\n            about\n            friend {\n              ...Friend\n              id\n              name\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n\n        fragment Friend on User {\n          dateOfBirth\n          interests\n        }\n      ']),
    _templateObject7 = _taggedTemplateLiteral(['\n        query {\n          user(id: $userId) {\n            dateOfBirth\n            about\n            id\n          }\n          otherUser {\n            id\n            name\n          }\n        }\n      '], ['\n        query {\n          user(id: $userId) {\n            dateOfBirth\n            about\n            id\n          }\n          otherUser {\n            id\n            name\n          }\n        }\n      ']),
    _templateObject8 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n            interests\n            ...User\n            about\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n\n        fragment User on User {\n          tags {\n            primary { name }\n            secondary { name }\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n            interests\n            ...User\n            about\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n\n        fragment User on User {\n          tags {\n            primary { name }\n            secondary { name }\n          }\n        }\n      ']),
    _templateObject9 = _taggedTemplateLiteral(['\n        query {\n          user {\n            dateOfBirth\n            ...User\n            about\n            id\n          }\n          otherUser {\n            id\n            name\n          }\n        }\n\n        fragment User on User {\n          tags {\n            primary { name }\n            secondary { name }\n          }\n        }\n      '], ['\n        query {\n          user {\n            dateOfBirth\n            ...User\n            about\n            id\n          }\n          otherUser {\n            id\n            name\n          }\n        }\n\n        fragment User on User {\n          tags {\n            primary { name }\n            secondary { name }\n          }\n        }\n      ']),
    _templateObject10 = _taggedTemplateLiteral(['\n        query {\n          feed {\n            items {\n              id\n              __typename\n              ...PlantItem\n              ...InsectItem\n              ...on Grass {\n                type\n              }\n            }\n          }\n        }\n\n        fragment PlantItem on Plant {\n          name\n          colour\n        }\n\n        fragment InsectItem on Insect {\n          name\n          speed\n        }\n      '], ['\n        query {\n          feed {\n            items {\n              id\n              __typename\n              ...PlantItem\n              ...InsectItem\n              ...on Grass {\n                type\n              }\n            }\n          }\n        }\n\n        fragment PlantItem on Plant {\n          name\n          colour\n        }\n\n        fragment InsectItem on Insect {\n          name\n          speed\n        }\n      ']),
    _templateObject11 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: 3) {\n              user {\n                id\n                name\n              }\n            }\n\n            otherUsers {\n              id\n              name\n            }\n\n            nestedUser {\n              id\n              about\n              foo\n            }\n          }\n\n          someOtherUser {\n            id\n            interests\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: 3) {\n              user {\n                id\n                name\n              }\n            }\n\n            otherUsers {\n              id\n              name\n            }\n\n            nestedUser {\n              id\n              about\n              foo\n            }\n          }\n\n          someOtherUser {\n            id\n            interests\n          }\n        }\n      ']),
    _templateObject12 = _taggedTemplateLiteral(['\n        query {\n          user {\n            friends(first: 3) {\n              user {\n                name\n                id\n              }\n            }\n\n            nestedUser {\n              about\n              id\n            }\n\n            id\n          }\n        }\n      '], ['\n        query {\n          user {\n            friends(first: 3) {\n              user {\n                name\n                id\n              }\n            }\n\n            nestedUser {\n              about\n              id\n            }\n\n            id\n          }\n        }\n      ']),
    _templateObject13 = _taggedTemplateLiteral(['\n        fragment Bar on User {\n          andAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        query {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            moreFriendsDynamic: friends(limit: $someOtherLimit) { id, name }\n            relatedFriends {\n              id\n              name\n              friends(limit: $justOne) { name }\n              ...Another\n              ...AndAnother\n            }\n            ...Foo\n            ...on User {\n              interests\n            }\n            bestFriend {\n              friends { id, name, tags { name } }\n            }\n            dateOfBirth\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Another on User {\n          about\n          interests\n        }\n\n        fragment AndAnother on User {\n          id\n        }\n      '], ['\n        fragment Bar on User {\n          andAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        query {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            moreFriendsDynamic: friends(limit: $someOtherLimit) { id, name }\n            relatedFriends {\n              id\n              name\n              friends(limit: $justOne) { name }\n              ...Another\n              ...AndAnother\n            }\n            ...Foo\n            ...on User {\n              interests\n            }\n            bestFriend {\n              friends { id, name, tags { name } }\n            }\n            dateOfBirth\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Another on User {\n          about\n          interests\n        }\n\n        fragment AndAnother on User {\n          id\n        }\n      ']),
    _templateObject14 = _taggedTemplateLiteral(['\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        query {\n          user {\n            about\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            relatedFriends {\n              id\n              name\n              friends(limit: $justOne) { name, id }\n              ...Another\n              ...AndAnother\n            }\n            ...Foo\n            dateOfBirth\n            id\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Another on User {\n          about\n          interests\n        }\n\n        fragment AndAnother on User {\n          id\n        }\n      '], ['\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        query {\n          user {\n            about\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            relatedFriends {\n              id\n              name\n              friends(limit: $justOne) { name, id }\n              ...Another\n              ...AndAnother\n            }\n            ...Foo\n            dateOfBirth\n            id\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Another on User {\n          about\n          interests\n        }\n\n        fragment AndAnother on User {\n          id\n        }\n      ']),
    _templateObject15 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      ']),
    _templateObject16 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: 3) {\n              user {\n                id\n                name\n              }\n            }\n\n            nestedUser {\n              id\n              about\n            }\n\n            otherUsers {\n              id\n              name\n            }\n          }\n\n          someOtherUser {\n            id\n            interests\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: 3) {\n              user {\n                id\n                name\n              }\n            }\n\n            nestedUser {\n              id\n              about\n            }\n\n            otherUsers {\n              id\n              name\n            }\n          }\n\n          someOtherUser {\n            id\n            interests\n          }\n        }\n      ']);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _printer = require('graphql-tag/printer');

var _2 = require('../../../');

var _util = require('../../../util');

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-env mocha */

describe('middleware/normalize-entities', function () {

  describe('cacheQueryResult', function () {
    it('should normalize entities in a simple query', function () {
      var _expect$to$eql;

      var query = (0, _graphqlTag2.default)(_templateObject);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        },
        otherUser: null
      };

      var previousCache = {};
      var cache = (0, _2.cacheQueryResult)(previousCache, query, result, null, _index.normalizeEntities);

      (0, _chai.expect)(cache).to.eql((_expect$to$eql = {}, _defineProperty(_expect$to$eql, (0, _util.cacheKey)('node', { id: '10' }), {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00'
      }), _defineProperty(_expect$to$eql, 'user', {
        id: '10'
      }), _defineProperty(_expect$to$eql, 'otherUser', null), _expect$to$eql));
    });

    it('should normalize entities in a complex query', function () {
      var _cacheKey, _expect$to$eql2;

      var query = (0, _graphqlTag2.default)(_templateObject2);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          friends: [{
            user: {
              id: '11',
              name: 'Person 1'
            }
          }, {
            user: {
              id: '12',
              name: 'Person 2'
            }
          }],
          otherUsers: [{
            id: '13',
            name: 'Person 3'
          }, {
            id: '14',
            name: 'Person 4'
          }],
          nestedUser: {
            id: '10',
            about: 'Same user inside itself.'
          }
        },
        someOtherUser: {
          id: '10',
          interests: 'What?!'
        }
      };

      var previousCache = {};
      var cache = (0, _2.cacheQueryResult)(previousCache, query, result, null, _index.normalizeEntities);

      (0, _chai.expect)(cache).to.eql((_expect$to$eql2 = {}, _defineProperty(_expect$to$eql2, (0, _util.cacheKey)('node', { id: '10' }), (_cacheKey = {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00',
        interests: 'What?!',
        about: 'Same user inside itself.'
      }, _defineProperty(_cacheKey, (0, _util.cacheKey)('friends', { first: 3 }), [{ user: { id: '11' } }, { user: { id: '12' } }]), _defineProperty(_cacheKey, 'otherUsers', [{ id: '13' }, { id: '14' }]), _defineProperty(_cacheKey, 'nestedUser', {
        id: '10'
      }), _cacheKey)), _defineProperty(_expect$to$eql2, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 1'
      }), _defineProperty(_expect$to$eql2, (0, _util.cacheKey)('node', { id: '12' }), {
        id: '12',
        name: 'Person 2'
      }), _defineProperty(_expect$to$eql2, (0, _util.cacheKey)('node', { id: '13' }), {
        id: '13',
        name: 'Person 3'
      }), _defineProperty(_expect$to$eql2, (0, _util.cacheKey)('node', { id: '14' }), {
        id: '14',
        name: 'Person 4'
      }), _defineProperty(_expect$to$eql2, 'user', {
        id: '10'
      }), _defineProperty(_expect$to$eql2, 'someOtherUser', {
        id: '10'
      }), _expect$to$eql2));
    });
  });

  describe('passThroughQuery', function () {
    it('should take a simple cache state with normalized entities and query and remove unnecessary fields', function () {
      var _cache;

      var query = (0, _graphqlTag2.default)(_templateObject3);

      var cache = (_cache = {}, _defineProperty(_cache, (0, _util.cacheKey)('node', { id: '10' }), {
        id: '10',
        name: 'John Smith',
        interests: 'Hi'
      }), _defineProperty(_cache, 'user', {
        id: '10'
      }), _cache);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, null, _index.normalizeEntities));

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject4)));
    });

    it('should take a simple cache state and query and return null if all data requested is in cache', function () {
      var _cache2;

      var query = (0, _graphqlTag2.default)(_templateObject5);

      var variables = { userId: '10' };

      var cache = (_cache2 = {}, _defineProperty(_cache2, (0, _util.cacheKey)('node', { id: '10' }), {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00',
        friend: {
          id: '11'
        }
      }), _defineProperty(_cache2, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 1'
      }), _defineProperty(_cache2, (0, _util.cacheKey)('user', { id: '10' }), {
        id: '10'
      }), _cache2);

      var newQuery = (0, _2.passThroughQuery)(cache, query, variables, _index.normalizeEntities);

      (0, _chai.expect)(newQuery).to.be.null;
    });

    it('should take a simple cache state with normalized entities and query with variables and remove unnecessary fields', function () {
      var _cache3;

      var query = (0, _graphqlTag2.default)(_templateObject6);

      var variables = { userId: '10' };

      var cache = (_cache3 = {}, _defineProperty(_cache3, (0, _util.cacheKey)('node', { id: '10' }), {
        id: '10',
        name: 'John Smith',
        interests: 'Hi',
        friend: {
          id: '11'
        }
      }), _defineProperty(_cache3, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 1',
        interests: 'GraphQL',
        dateOfBirth: 'someday'
      }), _defineProperty(_cache3, (0, _util.cacheKey)('user', { id: '10' }), {
        id: '10'
      }), _cache3);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, variables, _index.normalizeEntities));

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject7)));
    });

    it('should take a cache state and query with fragments and remove unnecessary fields', function () {
      var _cache4;

      var query = (0, _graphqlTag2.default)(_templateObject8);

      var cache = (_cache4 = {}, _defineProperty(_cache4, (0, _util.cacheKey)('node', { id: '10' }), {
        id: '10',
        name: 'John Smith',
        interests: 'Hi'
      }), _defineProperty(_cache4, 'user', {
        id: '10'
      }), _cache4);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, null, _index.normalizeEntities));

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject9)));
    });

    it('should take a simple cache state and query and remove unnecessary fields with fragments on an interface', function () {
      var _cache5;

      var query = (0, _graphqlTag2.default)(_templateObject10);

      var cache = (_cache5 = {}, _defineProperty(_cache5, (0, _util.cacheKey)('node', { id: '1' }), {
        id: '1',
        __typename: 'Plant',
        name: 'Conifer',
        colour: 'green'
      }), _defineProperty(_cache5, (0, _util.cacheKey)('node', { id: '2' }), {
        id: '2',
        __typename: 'Grass',
        type: 'unknown'
      }), _defineProperty(_cache5, (0, _util.cacheKey)('node', { id: '3' }), {
        id: '3',
        __typename: 'Insect',
        name: 'Bee',
        speed: 13
      }), _defineProperty(_cache5, (0, _util.cacheKey)('node', { id: '4' }), {
        id: '4',
        __typename: 'Insect',
        name: 'Wasp'
      }), _defineProperty(_cache5, 'feed', {
        items: [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }]
      }), _cache5);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, null, _index.normalizeEntities));

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject10)));
    });

    it('should take a simple cache state and query and return null with fragments on an interface with all data already in cache', function () {
      var _cache6;

      var query = (0, _graphqlTag2.default)(_templateObject10);

      var cache = (_cache6 = {}, _defineProperty(_cache6, (0, _util.cacheKey)('node', { id: '1' }), {
        id: '1',
        __typename: 'Plant',
        name: 'Conifer',
        colour: 'green'
      }), _defineProperty(_cache6, (0, _util.cacheKey)('node', { id: '2' }), {
        id: '2',
        __typename: 'Grass',
        type: 'unknown'
      }), _defineProperty(_cache6, (0, _util.cacheKey)('node', { id: '3' }), {
        id: '3',
        __typename: 'Insect',
        name: 'Bee',
        speed: 13
      }), _defineProperty(_cache6, (0, _util.cacheKey)('node', { id: '4' }), {
        id: '4',
        __typename: 'Insect',
        name: 'Wasp',
        speed: 14
      }), _defineProperty(_cache6, 'feed', {
        items: [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }]
      }), _cache6);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, null, _index.normalizeEntities));

      (0, _chai.expect)(newQuery).to.be.null;
    });

    it('should take a complex cache state with normalized entities and query and remove unnecessary fields', function () {
      var _cacheKey2, _cache7;

      var query = (0, _graphqlTag2.default)(_templateObject11);

      var cache = (_cache7 = {}, _defineProperty(_cache7, (0, _util.cacheKey)('node', { id: '10' }), (_cacheKey2 = {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00',
        interests: 'What?!',
        foo: 'bar'
      }, _defineProperty(_cacheKey2, (0, _util.cacheKey)('friends', { first: 3 }), [{ user: { id: '11' } }, { user: { id: '12' } }]), _defineProperty(_cacheKey2, 'otherUsers', [{ id: '13' }, { id: '14' }]), _defineProperty(_cacheKey2, 'nestedUser', {
        id: '10'
      }), _cacheKey2)), _defineProperty(_cache7, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 1'
      }), _defineProperty(_cache7, (0, _util.cacheKey)('node', { id: '12' }), {
        id: '12'
      }), _defineProperty(_cache7, (0, _util.cacheKey)('node', { id: '13' }), {
        id: '13',
        name: 'Person 3'
      }), _defineProperty(_cache7, (0, _util.cacheKey)('node', { id: '14' }), {
        id: '14',
        name: 'Person 4'
      }), _defineProperty(_cache7, 'user', {
        id: '10'
      }), _defineProperty(_cache7, 'someOtherUser', {
        id: '10'
      }), _cache7);

      var oldQuery = _lodash2.default.cloneDeep(query);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, null, _index.normalizeEntities));

      (0, _chai.expect)(query).to.eql(oldQuery); // ensure query wasn't mutated

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject12)));
    });

    it('should take a complex cache state and query with fragments and arrays and remove unnecessary fields', function () {
      var _cacheKey3, _cacheKey4, _cacheKey5, _cacheKey6, _cache8;

      var query = (0, _graphqlTag2.default)(_templateObject13);

      var variables = {
        justOne: 1,
        someLimit: 2,
        someOtherLimit: 3
      };

      var cache = (_cache8 = {}, _defineProperty(_cache8, (0, _util.cacheKey)('node', { id: '10' }), (_cacheKey3 = {
        id: '10',
        name: 'John Smith',
        interests: null,
        friends: [{ id: '11' }, { id: '12' }, { id: '13' }, { id: '14' }]
      }, _defineProperty(_cacheKey3, (0, _util.cacheKey)('friends', { limit: 10 }), [{ id: '11' }, { id: '12' }, { id: '13' }, { id: '14' }, { id: '15' }, { id: '16' }]), _defineProperty(_cacheKey3, (0, _util.cacheKey)('friends', { limit: 3 }), null), _defineProperty(_cacheKey3, 'relatedFriends', [{ id: '11' }, { id: '12' }, { id: '13' }]), _defineProperty(_cacheKey3, 'someOtherConnection', [{ name: 'Person 1' }, { name: 'Person 2' }]), _defineProperty(_cacheKey3, 'reallyAnotherConnection', [{ id: '20' }]), _defineProperty(_cacheKey3, 'bestFriend', {
        friends: []
      }), _cacheKey3)), _defineProperty(_cache8, (0, _util.cacheKey)('node', { id: '11' }), (_cacheKey4 = {
        id: '11', name: 'Person 1'
      }, _defineProperty(_cacheKey4, (0, _util.cacheKey)('friends', { limit: 1 }), [{ id: '12', name: 'Person 2' }]), _defineProperty(_cacheKey4, 'interests', 'Some'), _cacheKey4)), _defineProperty(_cache8, (0, _util.cacheKey)('node', { id: '12' }), (_cacheKey5 = {
        id: '12', name: 'Person 2'
      }, _defineProperty(_cacheKey5, (0, _util.cacheKey)('friends', { limit: 1 }), [{ id: '11' }]), _defineProperty(_cacheKey5, 'interests', 'Some'), _cacheKey5)), _defineProperty(_cache8, (0, _util.cacheKey)('node', { id: '13' }), (_cacheKey6 = {
        id: '13', name: 'Person 3'
      }, _defineProperty(_cacheKey6, (0, _util.cacheKey)('friends', { limit: 1 }), [{ id: '11' }]), _defineProperty(_cacheKey6, 'interests', 'Some'), _cacheKey6)), _defineProperty(_cache8, (0, _util.cacheKey)('node', { id: '14' }), {
        id: '14', name: 'Person 4'
      }), _defineProperty(_cache8, (0, _util.cacheKey)('node', { id: '15' }), {
        id: '15', name: 'Person 5'
      }), _defineProperty(_cache8, (0, _util.cacheKey)('node', { id: '16' }), {
        id: '16', name: 'Person 6'
      }), _defineProperty(_cache8, 'user', {
        id: '10'
      }), _cache8);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, variables, _index.normalizeEntities));

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject14)));
    });
  });

  describe('queryCache', function () {
    it('should take a simple cache state and query and return the correct data', function () {
      var _cache9;

      var query = (0, _graphqlTag2.default)(_templateObject15);

      var cache = (_cache9 = {}, _defineProperty(_cache9, (0, _util.cacheKey)('node', { id: '10' }), {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00'
      }), _defineProperty(_cache9, 'user', {
        id: '10'
      }), _cache9);
      var results = (0, _2.queryCache)(cache, query, null, _index.normalizeEntities);

      (0, _chai.expect)(results).to.eql({
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        }
      });
    });

    it('should take a complex cache state and query and return the correct data', function () {
      var _cacheKey7, _cache10;

      var query = (0, _graphqlTag2.default)(_templateObject16);

      var cache = (_cache10 = {}, _defineProperty(_cache10, (0, _util.cacheKey)('node', { id: '10' }), (_cacheKey7 = {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00',
        interests: 'What?!',
        about: 'Same user inside itself.'
      }, _defineProperty(_cacheKey7, (0, _util.cacheKey)('friends', { first: 3 }), [{ user: { id: '11' } }, { user: { id: '12' } }]), _defineProperty(_cacheKey7, 'otherUsers', [{ id: '13' }, { id: '14' }]), _defineProperty(_cacheKey7, 'nestedUser', {
        id: '10'
      }), _cacheKey7)), _defineProperty(_cache10, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 1'
      }), _defineProperty(_cache10, (0, _util.cacheKey)('node', { id: '12' }), {
        id: '12',
        name: 'Person 2'
      }), _defineProperty(_cache10, (0, _util.cacheKey)('node', { id: '13' }), {
        id: '13',
        name: 'Person 3'
      }), _defineProperty(_cache10, (0, _util.cacheKey)('node', { id: '14' }), {
        id: '14',
        name: 'Person 4'
      }), _defineProperty(_cache10, 'user', {
        id: '10'
      }), _defineProperty(_cache10, 'someOtherUser', {
        id: '10'
      }), _cache10);

      var results = (0, _2.queryCache)(cache, query, null, _index.normalizeEntities);

      (0, _chai.expect)(results).to.eql({
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          friends: [{
            user: {
              id: '11',
              name: 'Person 1'
            }
          }, {
            user: {
              id: '12',
              name: 'Person 2'
            }
          }],
          otherUsers: [{
            id: '13',
            name: 'Person 3'
          }, {
            id: '14',
            name: 'Person 4'
          }],
          nestedUser: {
            id: '10',
            about: 'Same user inside itself.'
          }
        },
        someOtherUser: {
          id: '10',
          interests: 'What?!'
        }
      });
    });
  });
});