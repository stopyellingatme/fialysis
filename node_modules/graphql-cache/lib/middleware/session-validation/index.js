'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sessionValidation = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = require('../../util');

var STORAGE_KEY = '$$sessionMeta';

var sessionValidation = exports.sessionValidation = function sessionValidation() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? { sessionId: null } : arguments[0];
  return {
    cacheQueryResult: {
      leaveSelectionSet: function leaveSelectionSet(node, cacheStack, resultStack) {
        var data = (0, _util.getTopOfStack)(resultStack);
        var dataInCache = (0, _util.getTopOfStack)(cacheStack);

        var meta = _extends({}, dataInCache[STORAGE_KEY]);

        for (var k in data) {
          if (k === STORAGE_KEY) continue;
          meta[k] = opts.sessionId;
        }

        dataInCache[STORAGE_KEY] = meta;
      },
      leaveQuery: function leaveQuery(node, cacheStack, resultStack) {
        var data = (0, _util.getTopOfStack)(resultStack);
        var dataInCache = (0, _util.getTopOfStack)(cacheStack);

        var meta = _extends({}, dataInCache[STORAGE_KEY]);

        for (var k in data) {
          if (k === STORAGE_KEY) continue;
          meta[k] = opts.sessionId;
        }

        dataInCache[STORAGE_KEY] = meta;
      }
    },
    passThroughQuery: {
      enterField: function enterField(node, cacheStack, cacheKey) {
        var data = (0, _util.getTopOfStack)(cacheStack);
        var meta = data[STORAGE_KEY];

        if (!meta || !meta[cacheKey] || meta[cacheKey] != null && meta[cacheKey] !== opts.sessionId) {
          // refetch as it's from another session or there's no session associated with it
          return (0, _util.markAsKeep)(node);
        }
      },
      enterNull: function enterNull(node, cacheStack, cacheKey) {
        var data = (0, _util.getTopOfStack)(cacheStack);
        var meta = data[STORAGE_KEY];

        if (!meta || !meta[cacheKey] || meta[cacheKey] != null && meta[cacheKey] !== opts.sessionId) {
          // refetch as it's from another session or there's no session associated with it
          return (0, _util.markAsKeep)(node);
        }
      }
    }
  };
};