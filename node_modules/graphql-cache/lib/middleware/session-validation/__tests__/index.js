'use strict';

var _templateObject = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends {\n              id\n              name\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends {\n              id\n              name\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n        }\n      ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            ...User\n            name\n          }\n        }\n\n        fragment User on User {\n          dateOfBirth\n          someNullValue\n        }\n      '], ['\n        query {\n          user {\n            id\n            ...User\n            name\n          }\n        }\n\n        fragment User on User {\n          dateOfBirth\n          someNullValue\n        }\n      ']),
    _templateObject3 = _taggedTemplateLiteral(['\n        query {\n          isFirstRun\n          user {\n            id\n            name\n            dateOfBirth\n            about\n            ...Foo\n            picture { url }\n            url\n            bestFriend {\n              name\n              about\n              interests\n              picture { url }\n            }\n            friends {\n              name\n              about\n            }\n            moreFriends: friends(first: $friendCount) {\n              edges {\n                node {\n                  name\n                  about\n                }\n              }\n            }\n          }\n        }\n\n        fragment Foo on User {\n          interests\n        }\n      '], ['\n        query {\n          isFirstRun\n          user {\n            id\n            name\n            dateOfBirth\n            about\n            ...Foo\n            picture { url }\n            url\n            bestFriend {\n              name\n              about\n              interests\n              picture { url }\n            }\n            friends {\n              name\n              about\n            }\n            moreFriends: friends(first: $friendCount) {\n              edges {\n                node {\n                  name\n                  about\n                }\n              }\n            }\n          }\n        }\n\n        fragment Foo on User {\n          interests\n        }\n      ']),
    _templateObject4 = _taggedTemplateLiteral(['\n        query {\n          user {\n            dateOfBirth\n            about\n            picture { url }\n            bestFriend {\n              interests\n              picture {\n                url\n              }\n            }\n            friends {\n              name\n              about\n            }\n          }\n        }\n      '], ['\n        query {\n          user {\n            dateOfBirth\n            about\n            picture { url }\n            bestFriend {\n              interests\n              picture {\n                url\n              }\n            }\n            friends {\n              name\n              about\n            }\n          }\n        }\n      ']);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _printer = require('graphql-tag/printer');

var _2 = require('../../../');

var _util = require('../../../util');

var _index = require('../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-env mocha */

describe('middleware/session-validation', function () {

  describe('cacheQueryResult', function () {
    it('should store the session ID against data in the cache from a simple query', function () {
      var query = (0, _graphqlTag2.default)(_templateObject);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }]
        },
        otherUser: null
      };

      var previousCache = {};
      var cache = (0, _2.cacheQueryResult)(previousCache, query, result, null, (0, _index.sessionValidation)({
        sessionId: 'testid'
      }));

      (0, _chai.expect)(cache).to.eql({
        $$sessionMeta: {
          otherUser: 'testid',
          user: 'testid'
        },
        user: {
          $$sessionMeta: {
            id: 'testid',
            name: 'testid',
            friends: 'testid',
            dateOfBirth: 'testid'
          },
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          friends: [{
            $$sessionMeta: {
              id: 'testid',
              name: 'testid'
            },
            id: '11',
            name: 'Person 1'
          }, {
            $$sessionMeta: {
              id: 'testid',
              name: 'testid'
            },
            id: '12',
            name: 'Person 2'
          }]
        },
        otherUser: null
      });
    });

    it('should store the session ID against data in the cache from a simple query with existing cache data', function () {
      var query = (0, _graphqlTag2.default)(_templateObject);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }]
        },
        otherUser: null
      };

      var previousCache = {
        user: {
          $$sessionMeta: {
            id: 'testid',
            name: 'testid',
            friends: 'testid',
            dateOfBirth: 'testid',
            interests: 'testid'
          },
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          interests: 'GraphQL',
          friends: [{
            $$sessionMeta: {
              id: 'testid',
              name: 'testid',
              interests: 'testid'
            },
            id: '11',
            name: 'Person 1',
            interests: 'GraphQL'
          }, {
            $$sessionMeta: {
              id: 'testid',
              name: 'testid',
              interests: 'testid'
            },
            id: '12',
            name: 'Person 2',
            interests: 'GraphQL'
          }]
        },
        otherUser: null
      };

      var cache = (0, _2.cacheQueryResult)(previousCache, query, result, null, (0, _index.sessionValidation)({
        sessionId: 'nextsession'
      }));

      (0, _chai.expect)(cache).to.eql({
        $$sessionMeta: {
          user: 'nextsession',
          otherUser: 'nextsession'
        },
        user: {
          $$sessionMeta: {
            id: 'nextsession',
            name: 'nextsession',
            friends: 'nextsession',
            dateOfBirth: 'nextsession',
            interests: 'testid'
          },
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          interests: 'GraphQL',
          friends: [{
            $$sessionMeta: {
              id: 'nextsession',
              name: 'nextsession'
            },
            id: '11',
            name: 'Person 1'
          }, {
            $$sessionMeta: {
              id: 'nextsession',
              name: 'nextsession'
            },
            id: '12',
            name: 'Person 2'
          }]
        },
        otherUser: null
      });
    });

    it('should keep null values in the cache', function () {
      var query = (0, _graphqlTag2.default)(_templateObject2);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        }
      };

      var previousCache = {
        user: {
          $$sessionMeta: {
            id: 'lastsession',
            name: 'lastsession',
            someNullValue: 'lastsession',
            oldData: 'lastsession',
            photo: 'lastsession'
          },
          id: '10',
          name: 'John Smith',
          someNullValue: null,
          oldData: 'hi',
          photo: null
        }
      };

      var cache = (0, _2.cacheQueryResult)(previousCache, query, result, null, (0, _index.sessionValidation)({
        sessionId: 'nextsession'
      }));

      (0, _chai.expect)(cache).to.eql({
        $$sessionMeta: {
          user: 'nextsession'
        },
        user: {
          $$sessionMeta: {
            id: 'nextsession',
            name: 'nextsession',
            someNullValue: 'lastsession',
            oldData: 'lastsession',
            photo: 'lastsession',
            dateOfBirth: 'nextsession'
          },
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          someNullValue: null,
          oldData: 'hi',
          photo: null
        }
      });
    });
  });

  describe('passThroughQuery', function () {
    it('should request fields which are present in cache from another session', function () {
      var query = (0, _graphqlTag2.default)(_templateObject3);

      var variables = {
        friendCount: 20
      };

      var cache = {
        $$sessionMeta: {
          isFirstRun: 'mysession'
        },
        isFirstRun: false,
        user: _defineProperty({
          $$sessionMeta: _defineProperty({
            id: 'mysession',
            name: 'mysession',
            interests: 'mysession',
            about: 'lastsession',
            bestFriend: 'mysession',
            picture: 'lastsession',
            url: 'mysession'
          }, (0, _util.cacheKey)('friends', { first: 20 }), 'mysession'),
          id: '10',
          name: 'John Smith',
          about: 'I am awesome',
          interests: 'GraphQL',
          dateOfBirth: 'whatever',
          picture: null,
          url: 'http://',
          bestFriend: {
            $$sessionMeta: {
              name: 'mysession',
              about: 'mysession',
              interests: 'lastsession',
              picture: 'lastsession'
            },
            name: 'Person 1',
            about: 'umm',
            interests: 'none',
            picture: {
              url: 'http://'
            }
          },
          friends: [{
            $$sessionMeta: {
              name: 'mysession',
              about: 'mysession'
            },
            name: 'Person 2',
            about: 'about me'
          }, {
            $$sessionMeta: {
              name: 'mysession',
              about: 'lastsession'
            },
            name: 'Person 3',
            about: 'about me' }]
        }, (0, _util.cacheKey)('friends', { first: 20 }), {
          edges: [{
            $$sessionMeta: {
              node: 'mysession'
            },
            node: {
              $$sessionMeta: {
                name: 'mysession',
                about: 'mysession'
              },
              name: 'Person 2',
              about: 'about me'
            }
          }]
        })
      };

      var oldQuery = _lodash2.default.cloneDeep(query);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, variables, (0, _index.sessionValidation)({
        sessionId: 'mysession'
      })));

      (0, _chai.expect)(query).to.eql(oldQuery); // ensure query wasn't mutated

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject4)));
    });
  });
});