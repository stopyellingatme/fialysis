'use strict';

var _templateObject = _taggedTemplateLiteral(['\n        query($limit: Int) {\n          isFirstRun\n          isWorking\n\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: $limit) {\n              id\n              name\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n\n          feed(first: $limit) {\n            id\n            ...User\n            ...Place\n          }\n        }\n\n        fragment User on User {\n          name\n          picture { url }\n        }\n\n        fragment Place on Place {\n          name\n          about\n        }\n      '], ['\n        query($limit: Int) {\n          isFirstRun\n          isWorking\n\n          user {\n            id\n            name\n            dateOfBirth\n\n            friends(first: $limit) {\n              id\n              name\n            }\n          }\n\n          otherUser {\n            id\n            name\n          }\n\n          feed(first: $limit) {\n            id\n            ...User\n            ...Place\n          }\n        }\n\n        fragment User on User {\n          name\n          picture { url }\n        }\n\n        fragment Place on Place {\n          name\n          about\n        }\n      ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            about\n            friends {\n              edges {\n                node {\n                  id\n                  name\n                  about\n                }\n              }\n            }\n            moreFriends: friends(first: $friendCount) {\n              edges {\n                node {\n                  id\n                  name\n                  about\n                  picture { url }\n                }\n              }\n            }\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            about\n            friends {\n              edges {\n                node {\n                  id\n                  name\n                  about\n                }\n              }\n            }\n            moreFriends: friends(first: $friendCount) {\n              edges {\n                node {\n                  id\n                  name\n                  about\n                  picture { url }\n                }\n              }\n            }\n          }\n        }\n      ']),
    _templateObject3 = _taggedTemplateLiteral(['\n        query {\n          user {\n            about\n            friends {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n            moreFriends: friends(first: $friendCount) {\n              edges {\n                node {\n                  id\n                  about\n                  picture { url }\n                }\n              }\n            }\n            id\n          }\n        }\n      '], ['\n        query {\n          user {\n            about\n            friends {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n            moreFriends: friends(first: $friendCount) {\n              edges {\n                node {\n                  id\n                  about\n                  picture { url }\n                }\n              }\n            }\n            id\n          }\n        }\n      ']);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _printer = require('graphql-tag/printer');

var _2 = require('../../');

var _util = require('../../util');

var _normalizeEntities = require('../normalize-entities');

var _sessionValidation = require('../session-validation');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-env mocha */

describe('all middleware combined', function () {

  describe('cacheQueryResult', function () {
    it('should store the session ID against data in the cache from a simple query with existing cache data', function () {
      var _previousCache, _cacheKey2, _expect$to$eql;

      var query = (0, _graphqlTag2.default)(_templateObject);

      var variables = { limit: 10 };

      var result = {
        isFirstRun: false,
        isWorking: true,
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }]
        },
        feed: [{ id: '15', name: 'Person 5', picture: { url: 'http://' } }, { id: '16', name: 'Some place!', about: 'This place is awesome' }],
        otherUser: null
      };

      var previousCache = (_previousCache = {}, _defineProperty(_previousCache, (0, _util.cacheKey)('node', { id: '10' }), _defineProperty({
        $$sessionMeta: {
          id: 'testid',
          name: 'testid',
          friends: 'testid',
          dateOfBirth: 'testid',
          interests: 'testid'
        },
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00',
        interests: 'GraphQL'
      }, (0, _util.cacheKey)('friends', { first: 9 }), [{
        id: '11'
      }, {
        id: '12'
      }])), _defineProperty(_previousCache, (0, _util.cacheKey)('node', { id: '11' }), {
        $$sessionMeta: {
          id: 'testid',
          name: 'testid',
          interests: 'testid'
        },
        id: '11',
        name: 'Person 1',
        interests: 'GraphQL'
      }), _defineProperty(_previousCache, (0, _util.cacheKey)('node', { id: '12' }), {
        $$sessionMeta: {
          id: 'testid',
          name: 'testid',
          interests: 'testid'
        },
        id: '12',
        name: 'Person 2',
        interests: 'GraphQL'
      }), _defineProperty(_previousCache, (0, _util.cacheKey)('node', { id: '15' }), {
        $$sessionMeta: {
          id: 'testid',
          name: 'testid',
          about: 'testid',
          picture: 'testid'
        },
        id: '15',
        name: 'Person 5',
        about: 'I\'m awesome',
        picture: {
          $$sessionMeta: {
            url: 'testid'
          },
          url: 'http://'
        }
      }), _defineProperty(_previousCache, (0, _util.cacheKey)('node', { id: '16' }), {
        $$sessionMeta: {
          id: 'testid',
          name: 'testid',
          about: 'testid',
          picture: 'testid'
        },
        id: '16',
        name: 'Some place!',
        about: 'This place is awesome',
        picture: {
          $$sessionMeta: {
            url: 'testid'
          },
          url: 'http://'
        }
      }), _defineProperty(_previousCache, 'user', {
        id: '10'
      }), _defineProperty(_previousCache, (0, _util.cacheKey)('feed', { first: 10 }), [{ id: '15' }, { id: '16' }]), _defineProperty(_previousCache, 'otherUser', null), _previousCache);

      var cache = (0, _2.cacheQueryResult)(previousCache, query, result, variables, (0, _sessionValidation.sessionValidation)({
        sessionId: 'nextsession'
      }), _normalizeEntities.normalizeEntities);

      (0, _chai.expect)(cache).to.eql((_expect$to$eql = {
        $$sessionMeta: {
          feed: 'nextsession',
          isFirstRun: 'nextsession',
          isWorking: 'nextsession',
          otherUser: 'nextsession',
          user: 'nextsession'
        },
        isFirstRun: false,
        isWorking: true
      }, _defineProperty(_expect$to$eql, (0, _util.cacheKey)('node', { id: '10' }), (_cacheKey2 = {
        $$sessionMeta: {
          id: 'nextsession',
          name: 'nextsession',
          friends: 'nextsession',
          dateOfBirth: 'nextsession',
          interests: 'testid'
        },
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00',
        interests: 'GraphQL'
      }, _defineProperty(_cacheKey2, (0, _util.cacheKey)('friends', { first: 9 }), [{
        id: '11'
      }, {
        id: '12'
      }]), _defineProperty(_cacheKey2, (0, _util.cacheKey)('friends', { first: 10 }), [{
        id: '11'
      }, {
        id: '12'
      }]), _cacheKey2)), _defineProperty(_expect$to$eql, (0, _util.cacheKey)('node', { id: '11' }), {
        $$sessionMeta: {
          id: 'nextsession',
          name: 'nextsession',
          interests: 'testid'
        },
        id: '11',
        name: 'Person 1',
        interests: 'GraphQL'
      }), _defineProperty(_expect$to$eql, (0, _util.cacheKey)('node', { id: '12' }), {
        $$sessionMeta: {
          id: 'nextsession',
          name: 'nextsession',
          interests: 'testid'
        },
        id: '12',
        name: 'Person 2',
        interests: 'GraphQL'
      }), _defineProperty(_expect$to$eql, (0, _util.cacheKey)('node', { id: '15' }), {
        $$sessionMeta: {
          id: 'nextsession',
          name: 'nextsession',
          about: 'testid',
          picture: 'nextsession'
        },
        id: '15',
        name: 'Person 5',
        about: 'I\'m awesome',
        picture: {
          $$sessionMeta: {
            url: 'nextsession'
          },
          url: 'http://'
        }
      }), _defineProperty(_expect$to$eql, (0, _util.cacheKey)('node', { id: '16' }), {
        $$sessionMeta: {
          id: 'nextsession',
          name: 'nextsession',
          about: 'nextsession',
          picture: 'testid'
        },
        id: '16',
        name: 'Some place!',
        about: 'This place is awesome',
        picture: {
          $$sessionMeta: {
            url: 'testid'
          },
          url: 'http://'
        }
      }), _defineProperty(_expect$to$eql, 'user', {
        id: '10'
      }), _defineProperty(_expect$to$eql, (0, _util.cacheKey)('feed', { first: 10 }), [{ id: '15' }, { id: '16' }]), _defineProperty(_expect$to$eql, 'otherUser', null), _expect$to$eql));
    });
  });

  describe('passThroughQuery', function () {
    it('should request fields which are present in cache from another session', function () {
      var _cache;

      var query = (0, _graphqlTag2.default)(_templateObject2);

      var variables = {
        friendCount: 20
      };

      var cache = (_cache = {}, _defineProperty(_cache, (0, _util.cacheKey)('node', { id: '10' }), _defineProperty({
        $$sessionMeta: _defineProperty({
          id: 'mysession',
          name: 'mysession',
          friends: 'mysession'
        }, (0, _util.cacheKey)('friends', { first: 20 }), 'mysession'),
        id: '10',
        name: 'John Smith',
        about: 'I am awesome',
        friends: {
          $$sessionMeta: {
            edges: 'mysession'
          },
          edges: [{
            $$sessionMeta: {
              node: 'mysession'
            },
            node: {
              id: '11'
            }
          }]
        }
      }, (0, _util.cacheKey)('friends', { first: 20 }), {
        $$sessionMeta: {
          edges: 'lastsession'
        },
        edges: [{
          $$sessionMeta: {
            node: 'mysession'
          },
          node: {
            id: '12'
          }
        }]
      })), _defineProperty(_cache, (0, _util.cacheKey)('node', { id: '11' }), {
        $$sessionMeta: {
          name: 'mysession',
          about: 'mysession'
        },
        id: '11',
        name: 'Person 1',
        about: 'about me'
      }), _defineProperty(_cache, (0, _util.cacheKey)('node', { id: '12' }), {
        $$sessionMeta: {
          name: 'mysession',
          about: 'lastsession',
          picture: 'lastsession'
        },
        id: '12',
        name: 'Person 2',
        about: 'about me',
        picture: null
      }), _defineProperty(_cache, 'user', {
        id: '10'
      }), _cache);

      var oldQuery = _lodash2.default.cloneDeep(query);

      var newQuery = (0, _printer.print)((0, _2.passThroughQuery)(cache, query, variables, (0, _sessionValidation.sessionValidation)({
        sessionId: 'mysession'
      }), _normalizeEntities.normalizeEntities));

      (0, _chai.expect)(query).to.eql(oldQuery); // ensure query wasn't mutated

      (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject3)));
    });
  });
});