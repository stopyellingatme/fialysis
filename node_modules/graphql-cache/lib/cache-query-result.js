'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.cacheQueryResult = cacheQueryResult;

var _visitor = require('graphql/language/visitor');

var _util = require('./util');

var VISIT_SKIP_THIS_NODE = false;

function cacheQueryResult(previousCache, query, result) {
  var queryVariables = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

  var cache = _extends({}, previousCache);
  var simplifiedAst = (0, _util.simplifyAst)(query, queryVariables);

  for (var _len = arguments.length, middleware = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
    middleware[_key - 4] = arguments[_key];
  }

  visitTree(simplifiedAst, (0, _util.getNewStackFrom)(cache), (0, _util.getNewStackFrom)(result), middleware);

  return cache;
}

function visitTree(ast, cacheStack, resultStack) {
  var middleware = arguments.length <= 3 || arguments[3] === undefined ? [] : arguments[3];

  (0, _visitor.visit)(ast, {
    enter: function enter(node, key, parent, path, ancestors) {
      if (node.kind === 'OperationDefinition' && node.operation === 'query' && node.selectionSet) {
        (0, _util.callMiddleware)(middleware, 'cacheQueryResult', 'enterQuery', node, cacheStack, resultStack);
      }

      if (node.kind === 'Field') {
        var cacheStackTop = (0, _util.getTopOfStack)(cacheStack);
        var resultStackTop = (0, _util.getTopOfStack)(resultStack);

        var cacheKey = getCacheKey(node);
        var resultKey = getResultKey(node);
        var selectionSet = node.selectionSet;

        if (selectionSet) {
          if (resultStackTop[resultKey] === null) {
            cacheStackTop[cacheKey] = resultStackTop[resultKey];

            return VISIT_SKIP_THIS_NODE;
          } else if (resultStackTop[resultKey] == null) {
            return VISIT_SKIP_THIS_NODE;
          }

          // ensure immutability if existing data is present
          if (cacheStackTop[cacheKey] != null) {
            cacheStackTop[cacheKey] = _extends({}, cacheStackTop[cacheKey]);
          }

          if (Array.isArray(resultStackTop[resultKey])) {
            cacheStackTop[cacheKey] = []; // always wipe existing arrays in the previous cache

            (0, _util.pushToStack)(cacheStack, cacheStackTop[cacheKey]);
            (0, _util.pushToStack)(resultStack, resultStackTop[resultKey]);

            visitArray(node, cacheStack, resultStack, middleware);

            (0, _util.popTopFromStack)(cacheStack);
            (0, _util.popTopFromStack)(resultStack);

            return VISIT_SKIP_THIS_NODE;
          } else {
            if (!cacheStackTop[cacheKey]) {
              cacheStackTop[cacheKey] = {};
            }

            (0, _util.pushToStack)(cacheStack, cacheStackTop[cacheKey]);
            (0, _util.pushToStack)(resultStack, resultStackTop[resultKey]);

            (0, _util.callMiddleware)(middleware, 'cacheQueryResult', 'enterSelectionSet', node, cacheStack, resultStack);
          }
        } else {
          if (resultStackTop[resultKey] !== undefined) {
            cacheStackTop[cacheKey] = resultStackTop[resultKey];
          }
        }
      }
    },
    leave: function leave(node) {
      if (node.kind === 'OperationDefinition' && node.operation === 'query' && node.selectionSet) {
        (0, _util.callMiddleware)(middleware, 'cacheQueryResult', 'leaveQuery', node, cacheStack, resultStack);
      }

      if (node.kind === 'Field') {
        var selectionSet = node.selectionSet;

        if (selectionSet) {
          (0, _util.callMiddleware)(middleware, 'cacheQueryResult', 'leaveSelectionSet', node, cacheStack, resultStack);

          (0, _util.popTopFromStack)(cacheStack);
          (0, _util.popTopFromStack)(resultStack);
        }
      }
    }
  });
}

function getCacheKey(node) {
  var baseName = node.name.value;

  if (node.arguments.length === 0) {
    return baseName;
  }

  var args = {};

  node.arguments.forEach(function (argument) {
    args[argument.name.value] = argument.value.value;
  });

  return baseName + '|' + JSON.stringify(args);
}

function getResultKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}

function visitArray(node, cacheStack, resultStack, middleware) {
  var ast = node.selectionSet;
  var cacheStackTop = (0, _util.getTopOfStack)(cacheStack);
  var resultStackTop = (0, _util.getTopOfStack)(resultStack);

  resultStackTop.forEach(function (element, index) {
    cacheStackTop[index] = {};

    var newResultStack = (0, _util.getNewStackFrom)(element);

    (0, _util.pushToStack)(cacheStack, cacheStackTop[index]);
    (0, _util.callMiddleware)(middleware, 'cacheQueryResult', 'enterSelectionSet', node, cacheStack, newResultStack);

    visitTree(ast, cacheStack, newResultStack, middleware);

    (0, _util.callMiddleware)(middleware, 'cacheQueryResult', 'leaveSelectionSet', node, cacheStack, newResultStack);
    (0, _util.popTopFromStack)(cacheStack);
  });
}