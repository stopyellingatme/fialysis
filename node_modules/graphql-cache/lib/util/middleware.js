'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callMiddleware = callMiddleware;

var _visitor = require('graphql/language/visitor');

function callMiddleware(middleware, fnName, subFunc, node) {
  if (!middleware) return;

  var newNode = node;

  for (var _len = arguments.length, otherArgs = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
    otherArgs[_key - 4] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var middlewareDef = _step.value;

      if (middlewareDef[fnName] && middlewareDef[fnName][subFunc]) {
        var _middlewareDef$fnName;

        var result = (_middlewareDef$fnName = middlewareDef[fnName])[subFunc].apply(_middlewareDef$fnName, [newNode].concat(otherArgs));

        if (result === false) {
          return false;
        }

        if (result === _visitor.BREAK) {
          return _visitor.BREAK;
        }

        if (result === null) {
          return null;
        }

        if (result !== undefined) {
          newNode = result;
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (newNode === node) {
    return undefined;
  }

  return newNode;
}