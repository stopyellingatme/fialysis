'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryCache = queryCache;

var _visitor = require('graphql/language/visitor');

var _util = require('./util');

var VISIT_SKIP_THIS_NODE = false;

function queryCache(cache, query) {
  var queryVariables = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var simplifiedAst = (0, _util.simplifyAst)(query, queryVariables);
  var result = {};

  for (var _len = arguments.length, middleware = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    middleware[_key - 3] = arguments[_key];
  }

  visitTree(simplifiedAst, (0, _util.getNewStackFrom)(cache), (0, _util.getNewStackFrom)(result), middleware);

  return result;
}

function visitTree(ast, cacheStack, resultStack, middleware) {
  (0, _visitor.visit)(ast, {
    enter: function enter(node, key, parent, path, ancestors) {
      if (node.kind === 'Field') {
        var cacheStackTop = (0, _util.getTopOfStack)(cacheStack);
        var resultStackTop = (0, _util.getTopOfStack)(resultStack);

        var cacheKey = getCacheKey(node);
        var resultKey = getResultKey(node);
        var selectionSet = node.selectionSet;

        if (cacheStackTop[cacheKey] == null) {
          resultStackTop[resultKey] = null;
          return VISIT_SKIP_THIS_NODE;
        }

        if (selectionSet) {
          if (Array.isArray(cacheStackTop[cacheKey])) {
            resultStackTop[resultKey] = [];

            (0, _util.pushToStack)(cacheStack, cacheStackTop[cacheKey]);
            (0, _util.pushToStack)(resultStack, resultStackTop[resultKey]);

            visitArray(node, cacheStack, resultStack, middleware);

            (0, _util.popTopFromStack)(cacheStack);
            (0, _util.popTopFromStack)(resultStack);

            return VISIT_SKIP_THIS_NODE;
          } else {
            if (!resultStackTop[resultKey]) {
              resultStackTop[resultKey] = {};
            }

            (0, _util.pushToStack)(cacheStack, cacheStackTop[cacheKey]);
            (0, _util.pushToStack)(resultStack, resultStackTop[resultKey]);

            (0, _util.callMiddleware)(middleware, 'queryCache', 'enterSelectionSet', node, cacheStack, resultStack);
          }
        } else {
          resultStackTop[resultKey] = cacheStackTop[cacheKey];
        }
      }
    },
    leave: function leave(node) {
      if (node.kind === 'Field') {
        var selectionSet = node.selectionSet;

        if (selectionSet) {
          (0, _util.callMiddleware)(middleware, 'queryCache', 'leaveSelectionSet', node, cacheStack, resultStack);

          (0, _util.popTopFromStack)(cacheStack);
          (0, _util.popTopFromStack)(resultStack);
        }
      }
    }
  });
}

function getCacheKey(node) {
  var baseName = node.name.value;

  if (node.arguments.length === 0) {
    return baseName;
  }

  var args = {};

  node.arguments.forEach(function (argument) {
    args[argument.name.value] = argument.value.value;
  });

  return baseName + '|' + JSON.stringify(args);
}

function getResultKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}

function visitArray(node, cacheStack, resultStack, middleware) {
  var ast = node.selectionSet;

  var cacheStackTop = (0, _util.getTopOfStack)(cacheStack);
  var resultStackTop = (0, _util.getTopOfStack)(resultStack);

  cacheStackTop.forEach(function (element, index) {
    resultStackTop[index] = {};

    (0, _util.pushToStack)(cacheStack, cacheStackTop[index]);
    (0, _util.pushToStack)(resultStack, resultStackTop[index]);

    (0, _util.callMiddleware)(middleware, 'queryCache', 'enterSelectionSet', node, cacheStack, resultStack);

    visitTree(ast, cacheStack, resultStack, middleware);

    (0, _util.callMiddleware)(middleware, 'queryCache', 'leaveSelectionSet', node, cacheStack, resultStack);

    (0, _util.popTopFromStack)(cacheStack);
    (0, _util.popTopFromStack)(resultStack);
  });
}