'use strict';

var _templateObject = _taggedTemplateLiteral(['\n      query {\n        user {\n          id\n          name\n          dateOfBirth\n        }\n      }\n    '], ['\n      query {\n        user {\n          id\n          name\n          dateOfBirth\n        }\n      }\n    ']),
    _templateObject2 = _taggedTemplateLiteral(['\n      query {\n        user {\n          id\n          dateOfBirth\n        }\n      }\n    '], ['\n      query {\n        user {\n          id\n          dateOfBirth\n        }\n      }\n    ']),
    _templateObject3 = _taggedTemplateLiteral(['\n      query {\n        user {\n          id\n          name\n          friends {\n            id\n            name\n          }\n        }\n      }\n    '], ['\n      query {\n        user {\n          id\n          name\n          friends {\n            id\n            name\n          }\n        }\n      }\n    ']),
    _templateObject4 = _taggedTemplateLiteral(['\n      query {\n        user {\n          name\n        }\n      }\n    '], ['\n      query {\n        user {\n          name\n        }\n      }\n    ']),
    _templateObject5 = _taggedTemplateLiteral(['\n      query {\n        user {\n          id\n          friends {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      }\n    '], ['\n      query {\n        user {\n          id\n          friends {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      }\n    ']),
    _templateObject6 = _taggedTemplateLiteral(['\n      query {\n        user {\n          # request all fields again because there might be more records returned from the server\n          # and we\'ll need all of the fields for those records\n          friends {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      }\n    '], ['\n      query {\n        user {\n          # request all fields again because there might be more records returned from the server\n          # and we\'ll need all of the fields for those records\n          friends {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      }\n    ']),
    _templateObject7 = _taggedTemplateLiteral(['\n      query($userId: ID!) {\n        user {\n          id\n          name\n          dateOfBirth\n          ...someFragment\n        }\n      }\n\n      fragment someFragment on User {\n        name\n        dateOfBirth\n      }\n    '], ['\n      query($userId: ID!) {\n        user {\n          id\n          name\n          dateOfBirth\n          ...someFragment\n        }\n      }\n\n      fragment someFragment on User {\n        name\n        dateOfBirth\n      }\n    ']),
    _templateObject8 = _taggedTemplateLiteral(['\n      query {\n        feed {\n          items {\n            id\n            __typename\n            ...PlantItem\n            ...InsectItem\n            ...on Grass {\n              type\n            }\n          }\n        }\n      }\n\n      fragment PlantItem on Plant {\n        name\n        colour\n      }\n\n      fragment InsectItem on Insect {\n        name\n        speed\n      }\n    '], ['\n      query {\n        feed {\n          items {\n            id\n            __typename\n            ...PlantItem\n            ...InsectItem\n            ...on Grass {\n              type\n            }\n          }\n        }\n      }\n\n      fragment PlantItem on Plant {\n        name\n        colour\n      }\n\n      fragment InsectItem on Insect {\n        name\n        speed\n      }\n    ']),
    _templateObject9 = _taggedTemplateLiteral(['\n      query {\n        feed {\n          items {\n            id\n            __typename\n            ...PlantItem\n            ...InsectItem\n            ...on Grass {\n              type\n            }\n          }\n        }\n      }\n\n      fragment PlantItem on Plant {\n        name\n        colour\n      }\n\n      fragment InsectItem on Insect {\n        name\n        speed\n        colour\n      }\n    '], ['\n      query {\n        feed {\n          items {\n            id\n            __typename\n            ...PlantItem\n            ...InsectItem\n            ...on Grass {\n              type\n            }\n          }\n        }\n      }\n\n      fragment PlantItem on Plant {\n        name\n        colour\n      }\n\n      fragment InsectItem on Insect {\n        name\n        speed\n        colour\n      }\n    ']),
    _templateObject10 = _taggedTemplateLiteral(['\n      query($userId: ID!, $eventId: ID!, $count: Int!) {\n        user(id: $userId) {\n          id\n          name\n        }\n\n        event(id: $eventId) {\n          name\n          ...Event\n        }\n      }\n\n      fragment Event on Event {\n        picture { url }\n        going(first: $count) {\n          name\n        }\n      }\n    '], ['\n      query($userId: ID!, $eventId: ID!, $count: Int!) {\n        user(id: $userId) {\n          id\n          name\n        }\n\n        event(id: $eventId) {\n          name\n          ...Event\n        }\n      }\n\n      fragment Event on Event {\n        picture { url }\n        going(first: $count) {\n          name\n        }\n      }\n    ']),
    _templateObject11 = _taggedTemplateLiteral(['\n      query($eventId: ID!, $count: Int!) {\n        event(id: $eventId) {\n          name\n          ...Event\n        }\n      }\n\n      fragment Event on Event {\n        picture { url }\n        going(first: $count) {\n          name\n        }\n      }\n    '], ['\n      query($eventId: ID!, $count: Int!) {\n        event(id: $eventId) {\n          name\n          ...Event\n        }\n      }\n\n      fragment Event on Event {\n        picture { url }\n        going(first: $count) {\n          name\n        }\n      }\n    ']),
    _templateObject12 = _taggedTemplateLiteral(['\n      fragment Bar on User {\n        andAnotherConnection {\n          id\n          name\n        }\n      }\n\n      fragment Foo on User {\n        someOtherConnection {\n          id\n          name\n        }\n        ...Baz\n      }\n\n      query {\n        user {\n          id\n          theUserName: name\n          myOtherName: name\n          about\n          myFriends: friends { id, name }\n          sameFriends: friends { id, name }\n          otherFriends: friends(limit: 10) { id, name }\n          otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n          moreFriendsDynamic: friends(limit: $someOtherLimit) { id, name }\n          relatedFriends {\n            id\n            name\n            friends(limit: $justOne) { name }\n            ...Another\n            ...AndAnother\n          }\n          ...Foo\n          ...on User {\n            interests\n          }\n          bestFriend {\n            friends { id, name }\n          }\n          dateOfBirth\n        }\n      }\n\n      fragment Baz on User {\n        reallyAnotherConnection {\n          id\n          name\n        }\n      }\n\n      fragment Another on User {\n        about\n        interests\n      }\n\n      fragment AndAnother on User {\n        id\n      }\n    '], ['\n      fragment Bar on User {\n        andAnotherConnection {\n          id\n          name\n        }\n      }\n\n      fragment Foo on User {\n        someOtherConnection {\n          id\n          name\n        }\n        ...Baz\n      }\n\n      query {\n        user {\n          id\n          theUserName: name\n          myOtherName: name\n          about\n          myFriends: friends { id, name }\n          sameFriends: friends { id, name }\n          otherFriends: friends(limit: 10) { id, name }\n          otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n          moreFriendsDynamic: friends(limit: $someOtherLimit) { id, name }\n          relatedFriends {\n            id\n            name\n            friends(limit: $justOne) { name }\n            ...Another\n            ...AndAnother\n          }\n          ...Foo\n          ...on User {\n            interests\n          }\n          bestFriend {\n            friends { id, name }\n          }\n          dateOfBirth\n        }\n      }\n\n      fragment Baz on User {\n        reallyAnotherConnection {\n          id\n          name\n        }\n      }\n\n      fragment Another on User {\n        about\n        interests\n      }\n\n      fragment AndAnother on User {\n        id\n      }\n    ']),
    _templateObject13 = _taggedTemplateLiteral(['\n      fragment Foo on User {\n        someOtherConnection {\n          id\n          name\n        }\n        ...Baz\n      }\n\n      query {\n        user {\n          about\n          otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n          relatedFriends {\n            id\n            name\n            friends(limit: $justOne) { name }\n            ...Another\n            ...AndAnother\n          }\n          ...Foo\n          dateOfBirth\n        }\n      }\n\n      fragment Baz on User {\n        reallyAnotherConnection {\n          id\n          name\n        }\n      }\n\n      fragment Another on User {\n        about\n        interests\n      }\n\n      fragment AndAnother on User {\n        id\n      }\n    '], ['\n      fragment Foo on User {\n        someOtherConnection {\n          id\n          name\n        }\n        ...Baz\n      }\n\n      query {\n        user {\n          about\n          otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n          relatedFriends {\n            id\n            name\n            friends(limit: $justOne) { name }\n            ...Another\n            ...AndAnother\n          }\n          ...Foo\n          dateOfBirth\n        }\n      }\n\n      fragment Baz on User {\n        reallyAnotherConnection {\n          id\n          name\n        }\n      }\n\n      fragment Another on User {\n        about\n        interests\n      }\n\n      fragment AndAnother on User {\n        id\n      }\n    ']);

var _chai = require('chai');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _printer = require('graphql-tag/printer');

var _passThroughQuery = require('../pass-through-query');

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-env mocha */

describe('passThroughQuery', function () {

  it('should take a simple cache state and query and remove unnecessary fields', function () {
    var query = (0, _graphqlTag2.default)(_templateObject);

    var cache = {
      user: {
        name: 'John Smith'
      }
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query));

    (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject2)));
  });

  it('should take a simple cache state and query and return null if all data requested is in cache', function () {
    var query = (0, _graphqlTag2.default)(_templateObject);

    var cache = {
      user: {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00'
      }
    };

    var newQuery = (0, _passThroughQuery.passThroughQuery)(cache, query);

    (0, _chai.expect)(newQuery).to.be.null;
  });

  it('should take a query with an array which requests fields which are already in the cache', function () {
    var query = (0, _graphqlTag2.default)(_templateObject3);

    var cache = {
      user: {
        id: '10',
        friends: [{ id: '11', name: 'Foo bar' }, { id: '12', name: 'Jane Smith' }]
      }
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query));

    (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject4)));
  });

  it('should take a query with an array which requests more fields that aren\'t in the cache', function () {
    var query = (0, _graphqlTag2.default)(_templateObject5);

    var cache = {
      user: {
        id: '10',
        friends: [{ id: '11', name: 'Foo bar' }, { id: '12', name: 'Jane Smith' }]
      }
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query));

    (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject6)));
  });

  it('should take a simple cache state and query with fragments and return null if all data requested is in cache', function () {
    var query = (0, _graphqlTag2.default)(_templateObject7);

    var cache = {
      user: {
        id: '10',
        name: 'John Smith',
        dateOfBirth: '2016-09-20 10:00'
      }
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query));

    (0, _chai.expect)(newQuery).to.be.null;
  });

  it('should take a simple cache state and query and remove unnecessary fields with fragments on an interface', function () {
    var query = (0, _graphqlTag2.default)(_templateObject8);

    var cache = {
      feed: {
        items: [{
          id: '1',
          __typename: 'Plant',
          name: 'Conifer',
          colour: 'green'
        }, {
          id: '2',
          __typename: 'Grass',
          type: 'unknown'
        }, {
          id: '3',
          __typename: 'Insect',
          name: 'Bee',
          speed: 13
        }, {
          id: '4',
          __typename: 'Insect',
          name: 'Wasp'
        }]
      }
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query));

    (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject8)));
  });

  it('should take a simple cache state and return null with fragments on an interface with all data already in cache', function () {
    var query = (0, _graphqlTag2.default)(_templateObject8);

    var cache = {
      feed: {
        items: [{
          id: '1',
          __typename: 'Plant',
          name: 'Conifer',
          colour: 'green'
        }, {
          id: '2',
          __typename: 'Grass',
          type: 'unknown'
        }, {
          id: '3',
          __typename: 'Insect',
          name: 'Bee',
          speed: 13
        }, {
          id: '4',
          __typename: 'Insect',
          name: 'Wasp',
          speed: 14
        }]
      }
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query));

    (0, _chai.expect)(newQuery).to.be.null;
  });

  it('should take a simple cache state and return null with only one type being used with all data already in cache', function () {
    var query = (0, _graphqlTag2.default)(_templateObject9);

    var cache = {
      feed: {
        items: [{
          id: '1',
          __typename: 'Plant',
          name: 'Conifer',
          colour: 'green'
        }]
      }
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query));

    (0, _chai.expect)(newQuery).to.be.null;
  });

  it('should remove unused variables', function () {
    var query = (0, _graphqlTag2.default)(_templateObject10);

    var cache = _defineProperty({}, (0, _util.cacheKey)('user', { id: '10' }), {
      id: '10',
      name: 'John Smith'
    });

    var variables = { userId: '10', eventId: '11', count: '30' };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query, variables));

    (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject11)));
  });

  it('should take a complex query and result and return it in a cached format', function () {
    var _ref, _ref2, _ref3, _user;

    var query = (0, _graphqlTag2.default)(_templateObject12);

    var variables = {
      justOne: 1,
      someLimit: 2,
      someOtherLimit: 3
    };

    var cache = {
      user: (_user = {
        id: '10',
        name: 'John Smith',
        interests: null,
        friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }]
      }, _defineProperty(_user, (0, _util.cacheKey)('friends', { limit: 10 }), [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }]), _defineProperty(_user, (0, _util.cacheKey)('friends', { limit: 3 }), null), _defineProperty(_user, 'relatedFriends', [(_ref = {
        id: '11',
        name: 'Person 1'
      }, _defineProperty(_ref, (0, _util.cacheKey)('friends', { limit: 1 }), [{ id: '12', name: 'Person 2' }]), _defineProperty(_ref, 'interests', 'Some'), _ref), (_ref2 = {
        id: '12'
      }, _defineProperty(_ref2, (0, _util.cacheKey)('friends', { limit: 1 }), [{ id: '11', name: 'Person 1' }]), _defineProperty(_ref2, 'interests', 'Some'), _ref2), (_ref3 = {
        id: '13',
        name: 'Person 3'
      }, _defineProperty(_ref3, (0, _util.cacheKey)('friends', { limit: 1 }), [{ id: '11', name: 'Person 1' }]), _defineProperty(_ref3, 'interests', 'Some'), _ref3)]), _defineProperty(_user, 'someOtherConnection', [{ name: 'Person 1' }, { name: 'Person 2' }]), _defineProperty(_user, 'reallyAnotherConnection', [{ id: '20' }]), _defineProperty(_user, 'bestFriend', {
        friends: []
      }), _user)
    };

    var newQuery = (0, _printer.print)((0, _passThroughQuery.passThroughQuery)(cache, query, variables));

    (0, _chai.expect)(newQuery).to.equal((0, _printer.print)((0, _graphqlTag2.default)(_templateObject13)));
  });
});