'use strict';

var _templateObject = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            friends { id, name }\n            dateOfBirth\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            friends { id, name }\n            dateOfBirth\n          }\n        }\n      ']),
    _templateObject3 = _taggedTemplateLiteral(['\n        query($someLimit: Int) {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            relatedFriends { id, name }\n            ...Foo\n            ...on User {\n              interests\n            }\n            dateOfBirth\n          }\n        }\n\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        fragment Bar on User {\n          andAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n      '], ['\n        query($someLimit: Int) {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            relatedFriends { id, name }\n            ...Foo\n            ...on User {\n              interests\n            }\n            dateOfBirth\n          }\n        }\n\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        fragment Bar on User {\n          andAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n      ']),
    _templateObject4 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            ...User\n            name\n          }\n        }\n\n        fragment User on User {\n          dateOfBirth\n          someNullValue\n        }\n      '], ['\n        query {\n          user {\n            id\n            ...User\n            name\n          }\n        }\n\n        fragment User on User {\n          dateOfBirth\n          someNullValue\n        }\n      ']),
    _templateObject5 = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            relatedFriends { id, name }\n            dateOfBirth\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            relatedFriends { id, name }\n            dateOfBirth\n          }\n        }\n      ']);

var _chai = require('chai');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _cacheQueryResult = require('../cache-query-result');

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-env mocha */

describe('cacheQueryResult', function () {

  describe('with fresh cache', function () {
    it('should take a simple query result and return it in a cached format', function () {
      var query = (0, _graphqlTag2.default)(_templateObject);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        }
      };

      var previousCache = {};
      var cache = (0, _cacheQueryResult.cacheQueryResult)(previousCache, query, result);

      (0, _chai.expect)(cache).to.eql({
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        }
      });
    });

    it('should take a query result with an array and return it in a cached format', function () {
      var query = (0, _graphqlTag2.default)(_templateObject2);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          dateOfBirth: '2016-09-20 10:00'
        }
      };

      var previousCache = {};
      var cache = (0, _cacheQueryResult.cacheQueryResult)(previousCache, query, result);

      (0, _chai.expect)(cache).to.eql({
        user: {
          id: '10',
          name: 'John Smith',
          friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          dateOfBirth: '2016-09-20 10:00'
        }
      });
    });

    it('should take a complex query and result and return it in a cached format', function () {
      var _user;

      var query = (0, _graphqlTag2.default)(_templateObject3);

      var variables = {
        someLimit: 2
      };

      var result = {
        user: {
          id: '10',
          theUserName: 'John Smith',
          myOtherName: 'John Smith',
          about: null,
          interests: 'Woop',
          myFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          sameFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          otherFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }],
          otherFriendsDynamic: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }],
          relatedFriends: null,
          someOtherConnection: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }],
          reallyAnotherConnection: [{ id: '11', name: 'Person 1' }],
          dateOfBirth: '2016-09-20 10:00'
        }
      };

      var previousCache = {};
      var cache = (0, _cacheQueryResult.cacheQueryResult)(previousCache, query, result, variables);

      (0, _chai.expect)(cache).to.eql({
        user: (_user = {
          id: '10',
          name: 'John Smith',
          about: null,
          interests: 'Woop',
          friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }]
        }, _defineProperty(_user, (0, _util.cacheKey)('friends', { limit: 10 }), [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }]), _defineProperty(_user, (0, _util.cacheKey)('friends', { limit: 2 }), [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }]), _defineProperty(_user, 'relatedFriends', null), _defineProperty(_user, 'someOtherConnection', [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }]), _defineProperty(_user, 'reallyAnotherConnection', [{ id: '11', name: 'Person 1' }]), _defineProperty(_user, 'dateOfBirth', '2016-09-20 10:00'), _user)
      });
    });
  });

  describe('with existing data in cache', function () {
    it('should keep null values in the cache', function () {
      var query = (0, _graphqlTag2.default)(_templateObject4);

      var result = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        }
      };

      var previousCache = {
        user: {
          id: '10',
          name: 'John Smith',
          someNullValue: null,
          oldData: 'hi',
          photo: null
        }
      };

      var cache = (0, _cacheQueryResult.cacheQueryResult)(previousCache, query, result);

      (0, _chai.expect)(cache).to.eql({
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00',
          someNullValue: null,
          oldData: 'hi',
          photo: null
        }
      });
    });

    it('should take a complex query and result and return it in a cached format whilst respecting old cache data', function () {
      var _previousCache, _user2, _expect$to$eql, _expect$to$eql2;

      var query = (0, _graphqlTag2.default)(_templateObject5);

      var result = {
        user: {
          id: '10',
          theUserName: 'John Smith',
          myOtherName: 'John Smith',
          about: null,
          myFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          sameFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          otherFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }],
          relatedFriends: null,
          dateOfBirth: '2016-09-20 10:00'
        }
      };

      var previousCache = (_previousCache = {}, _defineProperty(_previousCache, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 11'
      }), _defineProperty(_previousCache, 'user', {
        about: 'This is awesome!',
        friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }]
      }), _previousCache);

      var cache = (0, _cacheQueryResult.cacheQueryResult)(previousCache, query, result);

      (0, _chai.expect)(cache).to.eql((_expect$to$eql = {}, _defineProperty(_expect$to$eql, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 11'
      }), _defineProperty(_expect$to$eql, 'user', (_user2 = {
        id: '10',
        name: 'John Smith',
        about: null,
        friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }]
      }, _defineProperty(_user2, (0, _util.cacheKey)('friends', { limit: 10 }), [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }]), _defineProperty(_user2, 'relatedFriends', null), _defineProperty(_user2, 'dateOfBirth', '2016-09-20 10:00'), _user2)), _expect$to$eql));

      // ensure old cache wasn't mutated
      (0, _chai.expect)(previousCache).to.eql((_expect$to$eql2 = {}, _defineProperty(_expect$to$eql2, (0, _util.cacheKey)('node', { id: '11' }), {
        id: '11',
        name: 'Person 11'
      }), _defineProperty(_expect$to$eql2, 'user', {
        about: 'This is awesome!',
        friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }]
      }), _expect$to$eql2));

      (0, _chai.expect)(previousCache.user).to.not.equal(cache.user);
    });
  });
});