'use strict';

var _templateObject = _taggedTemplateLiteral(['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      '], ['\n        query {\n          user {\n            id\n            name\n            dateOfBirth\n          }\n        }\n      ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        query($someLimit: Int) {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            relatedFriends { id, name }\n            ...Foo\n            ...on User {\n              interests\n              location {\n                address\n              }\n            }\n            location {\n              longitude\n              latitude\n            }\n            dateOfBirth\n          }\n        }\n\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        fragment Bar on User {\n          andAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n      '], ['\n        query($someLimit: Int) {\n          user {\n            id\n            theUserName: name\n            myOtherName: name\n            about\n            myFriends: friends { id, name }\n            sameFriends: friends { id, name }\n            otherFriends: friends(limit: 10) { id, name }\n            otherFriendsDynamic: friends(limit: $someLimit) { id, name }\n            relatedFriends { id, name }\n            ...Foo\n            ...on User {\n              interests\n              location {\n                address\n              }\n            }\n            location {\n              longitude\n              latitude\n            }\n            dateOfBirth\n          }\n        }\n\n        fragment Foo on User {\n          someOtherConnection {\n            id\n            name\n          }\n          ...Baz\n        }\n\n        fragment Bar on User {\n          andAnotherConnection {\n            id\n            name\n          }\n        }\n\n        fragment Baz on User {\n          reallyAnotherConnection {\n            id\n            name\n          }\n        }\n      ']),
    _templateObject3 = _taggedTemplateLiteral(['\n      query {\n        user(id: $userId) {\n          id\n          name\n          dateOfBirth\n        }\n      }\n    '], ['\n      query {\n        user(id: $userId) {\n          id\n          name\n          dateOfBirth\n        }\n      }\n    ']);

var _chai = require('chai');

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _queryCache = require('../query-cache');

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-env mocha */

describe('queryCache', function () {

  describe('with fresh cache', function () {
    it('should take an empty cache state and query and return nothing', function () {
      var query = (0, _graphqlTag2.default)(_templateObject);

      var cache = {};
      var results = (0, _queryCache.queryCache)(cache, query);

      (0, _chai.expect)(results).to.eql({
        user: null
      });
    });
  });

  describe('with existing data in cache', function () {
    it('should take a simple cache state and query and return the correct data', function () {
      var query = (0, _graphqlTag2.default)(_templateObject);

      var cache = {
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        }
      };
      var results = (0, _queryCache.queryCache)(cache, query);

      (0, _chai.expect)(results).to.eql({
        user: {
          id: '10',
          name: 'John Smith',
          dateOfBirth: '2016-09-20 10:00'
        }
      });
    });

    it('should take a complex query and result and return it in a cached format whilst respecting old cache data', function () {
      var _user;

      var query = (0, _graphqlTag2.default)(_templateObject2);

      var cache = {
        user: (_user = {
          id: '10',
          name: 'John Smith',
          about: null,
          interests: 'Woop',
          friends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          location: {
            latitude: '50',
            longitude: '2',
            address: 'Hi'
          }
        }, _defineProperty(_user, (0, _util.cacheKey)('friends', { limit: 10 }), [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }]), _defineProperty(_user, (0, _util.cacheKey)('friends', { limit: 2 }), [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }]), _defineProperty(_user, 'relatedFriends', null), _defineProperty(_user, 'someOtherConnection', [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }]), _defineProperty(_user, 'reallyAnotherConnection', [{ id: '11', name: 'Person 1' }]), _defineProperty(_user, 'dateOfBirth', '2016-09-20 10:00'), _user)
      };

      var variables = {
        someLimit: 2
      };

      var result = (0, _queryCache.queryCache)(cache, query, variables);

      (0, _chai.expect)(result).to.eql({
        user: {
          id: '10',
          theUserName: 'John Smith',
          myOtherName: 'John Smith',
          about: null,
          interests: 'Woop',
          location: {
            latitude: '50',
            longitude: '2',
            address: 'Hi'
          },
          myFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          sameFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }],
          otherFriends: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }, { id: '13', name: 'Person 3' }, { id: '14', name: 'Person 4' }, { id: '15', name: 'Person 5' }, { id: '16', name: 'Person 6' }],
          otherFriendsDynamic: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }],
          relatedFriends: null,
          someOtherConnection: [{ id: '11', name: 'Person 1' }, { id: '12', name: 'Person 2' }],
          reallyAnotherConnection: [{ id: '11', name: 'Person 1' }],
          dateOfBirth: '2016-09-20 10:00'
        }
      });
    });
  });

  it('should throw an error if using a variable which hasn\'t been defined', function () {
    var query = (0, _graphqlTag2.default)(_templateObject3);

    var cache = _defineProperty({}, (0, _util.cacheKey)('user', { id: '3' }), {
      id: '3',
      name: 'John Smith',
      dateOfBirth: 'not late enough'
    });

    (0, _chai.expect)(function () {
      return (0, _queryCache.queryCache)(cache, query, { userId: 3 });
    }).to.throw('simplifyAst(): Undefined variable referenced "userId"');
  });
});