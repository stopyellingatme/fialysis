'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.passThroughQuery = passThroughQuery;

var _visitor = require('graphql/language/visitor');

var _util = require('./util');

var VISIT_REMOVE_NODE = null;

function passThroughQuery(cache, query) {
  var variables = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  // stop ast from being mutated
  var rootAst = _extends({}, query, {
    definitions: query.definitions.map(function (def) {
      return _extends({}, def);
    })
  });

  for (var _len = arguments.length, middleware = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    middleware[_key - 3] = arguments[_key];
  }

  var astPendingDeletion = visitTree(rootAst, rootAst, [cache], variables, middleware);
  var newAst = visitTreeDeleteUnusedFragments(visitTreeDeleteNodes(astPendingDeletion));
  newAst = visitTreeDeleteUnusedVariables(newAst);

  // allow for middleware to have "after" hooks to change AST
  if (middleware) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = middleware[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var middlewareDef = _step.value;

        if (middlewareDef.passThroughQuery && middlewareDef.passThroughQuery.after) {
          var res = middlewareDef.passThroughQuery.after(cache, newAst, variables);

          if (!res) {
            return res;
          }

          newAst = res;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  if (!newAst || newAst.definitions.length === 0) {
    return null;
  }

  return newAst;
}

function visitTree(rootAst, ast, cacheStack, variables) {
  var middleware = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
  var insideQuery = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];

  var skipAfter = null;

  return (0, _visitor.visit)(ast, {
    enter: function enter(node, key, parent, path) {
      if (skipAfter) return false;

      if (node.kind === 'OperationDefinition' && node.operation === 'query') {
        insideQuery = true;
        return;
      }

      if (!insideQuery) {
        return;
      }

      if (node.kind === 'InlineFragment') {
        var onType = node.typeCondition.name && node.typeCondition.name.value;
        var cacheStackTop = (0, _util.getTopOfStack)(cacheStack);

        // try and select fragment based on type (if __typename is present)
        if (onType && cacheStackTop && cacheStackTop.__typename) {
          if (onType !== cacheStackTop.__typename) {
            // if types don't match, skip
            var newNode = (0, _util.markAsShouldDelete)(node);
            skipAfter = newNode;
            return newNode;
          }
        }
      }

      if (node.kind === 'FragmentSpread') {
        var nameOfFragment = node.name.value;
        var fragment = getFragment(rootAst, nameOfFragment);
        var _onType = fragment.typeCondition.name && fragment.typeCondition.name.value;
        var _cacheStackTop = (0, _util.getTopOfStack)(cacheStack);

        // try and select fragment based on type (if __typename is present)
        if (_onType && _cacheStackTop && _cacheStackTop.__typename) {
          if (_onType !== _cacheStackTop.__typename) {
            // if types don't match, skip
            var _newNode = (0, _util.markAsShouldDelete)(node);
            skipAfter = _newNode;
            return _newNode;
          }
        }

        var newFragment = _extends({}, fragment, {
          selectionSet: visitTree(rootAst, fragment.selectionSet, cacheStack, variables, middleware, true)
        });

        (0, _util.replaceFragment)(rootAst, nameOfFragment, newFragment);

        return false;
      }

      if (node.kind === 'Field') {
        var _cacheStackTop2 = (0, _util.getTopOfStack)(cacheStack);

        if (_cacheStackTop2 == null) {
          return;
        }

        var cacheKey = getCacheKey(node, variables);
        var selectionSet = node.selectionSet;
        var cachedValue = _cacheStackTop2[cacheKey];

        if (selectionSet) {
          if (cachedValue === null) {
            var nullMiddlewareResult = (0, _util.callMiddleware)(middleware, 'passThroughQuery', 'enterNull', node, cacheStack, cacheKey);

            if (nullMiddlewareResult !== undefined) {
              if (selectionSet) {
                (0, _util.pushToStack)(cacheStack, cachedValue);
              }

              return nullMiddlewareResult;
            }
          }

          if (cachedValue === null || Array.isArray(cachedValue) && cachedValue.length === 0) {
            (0, _util.pushToStack)(cacheStack, cachedValue);
            return (0, _util.markAsShouldDelete)(node);
          } else if (cachedValue === undefined) {
            return false;
          } else if (Array.isArray(cachedValue)) {
            (0, _util.pushToStack)(cacheStack, cachedValue);

            var _newNode2 = visitArray(rootAst, node, cacheStack, cacheKey, variables, middleware);

            skipAfter = _newNode2;

            return _newNode2;
          } else {
            (0, _util.pushToStack)(cacheStack, cachedValue);

            var middlewareResult = (0, _util.callMiddleware)(middleware, 'passThroughQuery', 'enterSelectionSet', node, cacheStack, cacheKey);

            if (middlewareResult != null) {
              return middlewareResult;
            }
          }
        } else {
          var _middlewareResult = (0, _util.callMiddleware)(middleware, 'passThroughQuery', 'enterField', node, cacheStack, cacheKey);

          if (_middlewareResult !== undefined) {
            return _middlewareResult;
          }

          if (cachedValue !== undefined) {
            return (0, _util.markAsShouldDelete)(node);
          } else {
            return (0, _util.markAsKeep)(node);
          }
        }
      }
    },
    leave: function leave(node) {
      if (skipAfter === node) skipAfter = null;

      if (node.kind === 'OperationDefinition' && node.operation === 'query') {
        insideQuery = false;
        return;
      }

      if (!insideQuery) {
        return;
      }

      if (node.kind === 'Field') {
        var selectionSet = node.selectionSet;

        if (selectionSet) {
          var cachedValue = (0, _util.getTopOfStack)(cacheStack);

          if (Array.isArray(cachedValue)) {
            var hasFields = false;
            var hasDeletedFields = false;

            (0, _visitor.visit)(selectionSet, {
              enter: function enter(node) {
                if ((0, _util.isMarkedForDeletion)(node)) {
                  hasDeletedFields = true;
                  return false;
                } else if (node.kind === 'Field') {
                  hasFields = true;
                  return false;
                } else if (node.kind === 'FragmentSpread') {
                  var nameOfFragment = node.name.value;
                  var fragment = getFragment(ast, nameOfFragment);
                  var _res = checkFragmentForDeletedFields(rootAst, fragment);

                  if (_res.hasDeletedFields) hasDeletedFields = true;
                  if (_res.hasFields) hasFields = true;
                }
              }
            });

            if (hasFields && hasDeletedFields) {
              // array is querying for new fields, which means fetching from the server,
              // which means that now records could be returned from the server, WHICH MEANS (!!!)
              // we need to query for all fields in case of new records

              node = (0, _util.recursivelyMarkAsKeep)(rootAst, node);
            }
          }

          var res = (0, _util.callMiddleware)(middleware, 'passThroughQuery', 'leaveSelectionSet', node, cacheStack);

          (0, _util.popTopFromStack)(cacheStack);

          if (res !== undefined) {
            return res;
          }

          return node;
        }
      }
    }
  });
}

function checkFragmentForDeletedFields(rootAst, fragment) {
  var hasFields = false;
  var hasDeletedFields = false;

  (0, _visitor.visit)(fragment, {
    enter: function enter(node) {
      if ((0, _util.isMarkedForDeletion)(node)) {
        hasDeletedFields = true;
        return false;
      } else if (node.kind === 'Field') {
        hasFields = true;
        return false;
      } else if (node.kind === 'FragmentSpread') {
        var nameOfFragment = node.name.value;
        var _fragment = getFragment(rootAst, nameOfFragment);
        var res = checkFragmentForDeletedFields(rootAst, _fragment);

        if (res.hasDeletedFields) hasDeletedFields = true;
        if (res.hasFields) hasFields = true;
      }
    }
  });

  return { hasFields: hasFields, hasDeletedFields: hasDeletedFields };
}

function visitTreeDeleteNodes(ast) {
  return (0, _visitor.visit)(ast, {
    enter: function enter(node) {
      if ((0, _util.isMarkedForDeletion)(node)) {
        return VISIT_REMOVE_NODE;
      }
    },

    leave: removeEmptySelectionSets
  });
}

function visitTreeDeleteUnusedFragments(ast) {
  var usedFragments = [];

  var newAst = (0, _visitor.visit)(ast, {
    enter: function enter(node) {
      // remove fragmentspread's referencing non-existant fragments
      if (node.kind === 'FragmentSpread') {
        var nameOfFragment = node.name.value;
        var fragment = getFragment(ast, nameOfFragment);

        if (!fragment) {
          return VISIT_REMOVE_NODE;
        }

        usedFragments.push(nameOfFragment);
      }
    },

    leave: removeEmptySelectionSets
  });

  return (0, _visitor.visit)(newAst, {
    enter: function enter(node) {
      if (node.kind === 'FragmentDefinition') {
        var nameOfFragment = node.name.value;

        if (!usedFragments.includes(nameOfFragment)) {
          return VISIT_REMOVE_NODE;
        }
      }
    }
  });
}

function visitTreeDeleteUnusedVariables(ast) {
  var usedVariables = null;

  return (0, _visitor.visit)(ast, {
    enter: function enter(node) {
      if (node.kind === 'OperationDefinition' && node.operation === 'query') {
        usedVariables = [];

        trackUsedVariables(ast, node, usedVariables);
        return;
      }
    },
    leave: function leave(node) {
      if (node.kind === 'OperationDefinition' && node.operation === 'query') {
        return _extends({}, node, {
          variableDefinitions: node.variableDefinitions.filter(function (definition) {
            return usedVariables.includes(definition.variable.name.value);
          })
        });
      }
    }
  });
}

function trackUsedVariables(document, ast, usedVariables) {
  return (0, _visitor.visit)(ast, {
    enter: function enter(node) {
      if (node.kind === 'VariableDefinition') {
        return false;
      }

      if (node.kind === 'Variable') {
        var variableName = node.name.value;

        usedVariables.push(variableName);
        return;
      }

      if (node.kind === 'FragmentSpread') {
        var nameOfFragment = node.name.value;
        var fragment = getFragment(document, nameOfFragment);

        if (!fragment) {
          return;
        }

        trackUsedVariables(document, fragment, usedVariables);
      }
    }
  });
}

function removeEmptySelectionSets(node) {
  // remove empty fragments
  if (node.selectionSet && node.selectionSet.selections.length === 0) {
    return VISIT_REMOVE_NODE;
  }

  if (node.kind === 'InlineFragment' && node.selectionSet === null) {
    return VISIT_REMOVE_NODE;
  }
}

function removeUnusedFieldsFromArray(rootAst, ast) {
  return (0, _visitor.visit)(ast, {
    leave: function leave(node) {
      if (node.kind === 'InlineFragment' && node.selectionSet && (0, _util.isMarkedForDeletion)(node)) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = node.selectionSet.selections[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var selection = _step2.value;

            if (selection.__shouldDelete === false) {
              return (0, _util.markAsKeep)(node);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      if ((0, _util.isMarkedForDeletion)(node)) {
        if (node.kind === 'FragmentSpread') {
          var nameOfFragment = node.name.value;
          var fragment = getFragment(rootAst, nameOfFragment);

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = fragment.selectionSet.selections[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _selection = _step3.value;

              if (_selection.__shouldDelete === false) {
                return (0, _util.markAsKeep)(node);
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      }
    }
  });
}

function getFragment(ast, name) {
  if (ast.kind !== 'Document') {
    throw new Error('getFragment(): ast.kind is not Document');
  }

  var definitions = ast.definitions;


  return definitions.find(function (def) {
    return def.name && def.name.value === name;
  });
}

function getCacheKey(node, variables) {
  var baseName = node.name.value;

  if (node.arguments.length === 0) {
    return baseName;
  }

  var args = {};

  node.arguments.forEach(function (argument) {
    if (argument.value.kind === 'Variable') {
      var variableName = argument.value.name.value;

      if (variables[variableName] == null) {
        throw new Error('getCacheKey(): Variable referenced "' + variableName + '" but not provided');
      }

      return args[argument.name.value] = variables[variableName].toString();
    } else {
      args[argument.name.value] = argument.value.value;
    }
  });

  return baseName + '|' + JSON.stringify(args);
}

function visitArray(rootAst, node, cacheStack, cacheKey, variables, middleware) {
  var cacheStackTop = (0, _util.getTopOfStack)(cacheStack);

  var lastAst = node;

  cacheStackTop.forEach(function (element) {
    (0, _util.pushToStack)(cacheStack, element);
    (0, _util.callMiddleware)(middleware, 'passThroughQuery', 'enterSelectionSet', lastAst, cacheStack, cacheKey);

    lastAst = _extends({}, lastAst, {
      selectionSet: visitTree(rootAst, lastAst.selectionSet, cacheStack, variables, middleware, true)
    });

    var middlewareResult = (0, _util.callMiddleware)(middleware, 'passThroughQuery', 'leaveSelectionSet', lastAst, cacheStack);
    (0, _util.popTopFromStack)(cacheStack);

    if (middlewareResult != null) {
      lastAst = middlewareResult;
    }
  });

  return removeUnusedFieldsFromArray(rootAst, lastAst);
}